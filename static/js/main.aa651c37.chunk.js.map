{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","state","pressedKey","hendlerKey","key","setState","document","addEventListener","this","removeEventListener","className","Component","ReactDOM","render","getElementById"],"mappings":"2MAMaA,EAAb,4MACEC,MAAyB,CACvBC,WAAY,MAFhB,EAaEC,WAAa,YAAqC,IAAlCC,EAAiC,EAAjCA,IACd,EAAKC,SAAS,CAAEH,WAAYE,KAdhC,uDAKE,WACEE,SAASC,iBAAiB,QAASC,KAAKL,cAN5C,kCASE,WACEG,SAASG,oBAAoB,QAASD,KAAKL,cAV/C,oBAiBE,WACE,IAAQD,EAAeM,KAAKP,MAApBC,WAER,OACE,qBAAKQ,UAAU,MAAf,SACE,mBAAGA,UAAU,eAAb,SACGR,EAAU,mCAA+BA,EAA/B,KAA+C,kCAvBpE,GAAyBS,a,MCDzBC,IAASC,OACP,cAAC,EAAD,IACAP,SAASQ,eAAe,W","file":"static/js/main.aa651c37.chunk.js","sourcesContent":["import { Component } from 'react';\n\ninterface State {\n  pressedKey: string | null;\n}\n\nexport class App extends Component<{}, State> {\n  state: Readonly<State> = {\n    pressedKey: null,\n  };\n\n  componentDidMount(): void {\n    document.addEventListener('keyup', this.hendlerKey);\n  }\n\n  componentWillUnmount(): void {\n    document.removeEventListener('keyup', this.hendlerKey);\n  }\n\n  hendlerKey = ({ key }: { key: string }): void => {\n    this.setState({ pressedKey: key });\n  };\n\n  render() {\n    const { pressedKey } = this.state;\n\n    return (\n      <div className=\"App\">\n        <p className=\"App__message\">\n          {pressedKey ? `The last pressed key is [${pressedKey}]` : 'Nothing was pressed yet'}\n        </p>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nimport './index.scss';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}